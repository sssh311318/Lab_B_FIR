// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fir_fir_Pipeline_Time_delay_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fir_int_int_shift_reg_load,
        p_out,
        p_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1023:0] fir_int_int_shift_reg_load;
output  [1023:0] p_out;
output   p_out_ap_vld;

reg ap_idle;
reg p_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_76_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_195;
wire   [7:0] add_ln27_fu_84_p2;
reg   [7:0] add_ln27_reg_199;
wire   [6:0] trunc_ln29_2_fu_90_p1;
reg   [6:0] trunc_ln29_2_reg_204;
wire   [1023:0] or_ln29_fu_166_p2;
reg   [1023:0] or_ln29_reg_209;
reg   [7:0] i_fu_42;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0;
reg   [1023:0] empty_fu_46;
reg   [1023:0] ap_sig_allocacmp_p_load;
wire    ap_block_pp0_stage0_01001;
wire   [6:0] trunc_ln29_fu_102_p1;
wire   [9:0] tmp_1_fu_105_p3;
wire   [1023:0] zext_ln29_fu_113_p1;
wire   [1023:0] lshr_ln29_fu_117_p2;
wire   [9:0] shl_ln29_1_fu_127_p3;
wire   [1023:0] zext_ln29_1_fu_134_p1;
wire   [1023:0] shl_ln29_fu_138_p2;
wire   [1023:0] xor_ln29_fu_144_p2;
wire   [7:0] trunc_ln29_1_fu_123_p1;
wire   [1023:0] zext_ln29_2_fu_156_p1;
wire   [1023:0] and_ln29_fu_150_p2;
wire   [1023:0] shl_ln29_2_fu_160_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fir_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_fu_46 <= fir_int_int_shift_reg_load;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_fu_46 <= or_ln29_reg_209;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_76_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_42 <= add_ln27_fu_84_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_42 <= 8'd127;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_76_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln27_reg_199 <= add_ln27_fu_84_p2;
        trunc_ln29_2_reg_204 <= trunc_ln29_2_fu_90_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        or_ln29_reg_209 <= or_ln29_fu_166_p2;
        tmp_reg_195 <= ap_sig_allocacmp_i_1[32'd7];
    end
end

always @ (*) begin
    if (((tmp_fu_76_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 8'd127;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load = or_ln29_reg_209;
    end else begin
        ap_sig_allocacmp_p_load = empty_fu_46;
    end
end

always @ (*) begin
    if (((tmp_reg_195 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_fu_84_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(8'd255));

assign and_ln29_fu_150_p2 = (xor_ln29_fu_144_p2 & ap_sig_allocacmp_p_load);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign lshr_ln29_fu_117_p2 = ap_sig_allocacmp_p_load >> zext_ln29_fu_113_p1;

assign or_ln29_fu_166_p2 = (shl_ln29_2_fu_160_p2 | and_ln29_fu_150_p2);

assign p_out = empty_fu_46;

assign shl_ln29_1_fu_127_p3 = {{trunc_ln29_2_reg_204}, {3'd0}};

assign shl_ln29_2_fu_160_p2 = zext_ln29_2_fu_156_p1 << zext_ln29_1_fu_134_p1;

assign shl_ln29_fu_138_p2 = 1024'd255 << zext_ln29_1_fu_134_p1;

assign tmp_1_fu_105_p3 = {{trunc_ln29_fu_102_p1}, {3'd0}};

assign tmp_fu_76_p3 = ap_sig_allocacmp_i_1[32'd7];

assign trunc_ln29_1_fu_123_p1 = lshr_ln29_fu_117_p2[7:0];

assign trunc_ln29_2_fu_90_p1 = ap_sig_allocacmp_i_1[6:0];

assign trunc_ln29_fu_102_p1 = add_ln27_reg_199[6:0];

assign xor_ln29_fu_144_p2 = (shl_ln29_fu_138_p2 ^ 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215);

assign zext_ln29_1_fu_134_p1 = shl_ln29_1_fu_127_p3;

assign zext_ln29_2_fu_156_p1 = trunc_ln29_1_fu_123_p1;

assign zext_ln29_fu_113_p1 = tmp_1_fu_105_p3;

endmodule //fir_fir_Pipeline_Time_delay_loop
