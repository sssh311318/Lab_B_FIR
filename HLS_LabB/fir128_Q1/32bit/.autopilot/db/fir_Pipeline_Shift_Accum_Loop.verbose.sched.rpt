

================================================================
== Vitis HLS Report for 'fir_Pipeline_Shift_Accum_Loop'
================================================================
* Date:           Sun Apr  2 13:52:00 2023

* Version:        2022.1 (Build 3526262 on Mon Apr 18 15:48:16 MDT 2022)
* Project:        fir128_Q1
* Solution:       32bit (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  6.912 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |      133|      133|  1.330 us|  1.330 us|  133|  133|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +--------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                    |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |      Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +--------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Shift_Accum_Loop  |      131|      131|         5|          1|          1|   128|       yes|
        +--------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 5


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 5
* Pipeline : 1
  Pipeline-0 : II = 1, D = 5, States = { 1 2 3 4 5 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 5.78>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%acc = alloca i32 1"   --->   Operation 8 'alloca' 'acc' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 9 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%x_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %x"   --->   Operation 10 'read' 'x_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%mul_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %mul"   --->   Operation 11 'read' 'mul_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (1.58ns)   --->   "%store_ln0 = store i8 127, i8 %i"   --->   Operation 12 'store' 'store_ln0' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 13 [1/1] (1.58ns)   --->   "%store_ln0 = store i32 0, i32 %acc"   --->   Operation 13 'store' 'store_ln0' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.body"   --->   Operation 14 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%i_1 = load i8 %i"   --->   Operation 15 'load' 'i_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%specpipeline_ln0 = specpipeline void @_ssdm_op_SpecPipeline, i32 4294967295, i32 0, i32 1, i32 0, void @p_str"   --->   Operation 16 'specpipeline' 'specpipeline_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%tmp = bitselect i1 @_ssdm_op_BitSelect.i1.i8.i32, i8 %i_1, i32 7" [fir128_Q1/fir.cpp:28]   --->   Operation 17 'bitselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%empty = speclooptripcount i32 @_ssdm_op_SpecLoopTripCount, i64 128, i64 128, i64 128"   --->   Operation 18 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%br_ln28 = br i1 %tmp, void %for.body.split, void %for.end.exitStub" [fir128_Q1/fir.cpp:28]   --->   Operation 19 'br' 'br_ln28' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%i_cast1 = zext i8 %i_1"   --->   Operation 20 'zext' 'i_cast1' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%empty_6 = trunc i8 %i_1"   --->   Operation 21 'trunc' 'empty_6' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%specloopname_ln24 = specloopname void @_ssdm_op_SpecLoopName, void @empty_2" [fir128_Q1/fir.cpp:24]   --->   Operation 22 'specloopname' 'specloopname_ln24' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (1.55ns)   --->   "%icmp_ln29 = icmp_eq  i8 %i_1, i8 0" [fir128_Q1/fir.cpp:29]   --->   Operation 23 'icmp' 'icmp_ln29' <Predicate = (!tmp)> <Delay = 1.55> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%br_ln29 = br i1 %icmp_ln29, void %if.else, void %if.then" [fir128_Q1/fir.cpp:29]   --->   Operation 24 'br' 'br_ln29' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (1.87ns)   --->   "%add_ln33 = add i7 %empty_6, i7 127" [fir128_Q1/fir.cpp:33]   --->   Operation 25 'add' 'add_ln33' <Predicate = (!tmp & !icmp_ln29)> <Delay = 1.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%zext_ln33 = zext i7 %add_ln33" [fir128_Q1/fir.cpp:33]   --->   Operation 26 'zext' 'zext_ln33' <Predicate = (!tmp & !icmp_ln29)> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%shift_reg_V_addr = getelementptr i32 %shift_reg_V, i64 0, i64 %zext_ln33" [fir128_Q1/fir.cpp:33]   --->   Operation 27 'getelementptr' 'shift_reg_V_addr' <Predicate = (!tmp & !icmp_ln29)> <Delay = 0.00>
ST_1 : Operation 28 [2/2] (3.25ns)   --->   "%shift_reg_V_load = load i7 %shift_reg_V_addr" [fir128_Q1/fir.cpp:33]   --->   Operation 28 'load' 'shift_reg_V_load' <Predicate = (!tmp & !icmp_ln29)> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 128> <RAM>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%fir_int_int_c_addr = getelementptr i32 %fir_int_int_c, i64 0, i64 %i_cast1" [fir128_Q1/fir.cpp:34]   --->   Operation 29 'getelementptr' 'fir_int_int_c_addr' <Predicate = (!tmp & !icmp_ln29)> <Delay = 0.00>
ST_1 : Operation 30 [2/2] (3.25ns)   --->   "%fir_int_int_c_load = load i7 %fir_int_int_c_addr" [fir128_Q1/fir.cpp:34]   --->   Operation 30 'load' 'fir_int_int_c_load' <Predicate = (!tmp & !icmp_ln29)> <Delay = 3.25> <CoreInst = "ROM">   --->   Core 95 'ROM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 32> <Depth = 128> <ROM>
ST_1 : Operation 31 [1/1] (3.25ns)   --->   "%store_ln31 = store i32 %x_read, i32 0" [fir128_Q1/fir.cpp:31]   --->   Operation 31 'store' 'store_ln31' <Predicate = (!tmp & icmp_ln29)> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 128> <RAM>
ST_1 : Operation 32 [1/1] (1.58ns)   --->   "%br_ln32 = br void %for.inc" [fir128_Q1/fir.cpp:32]   --->   Operation 32 'br' 'br_ln32' <Predicate = (!tmp & icmp_ln29)> <Delay = 1.58>
ST_1 : Operation 33 [1/1] (1.91ns)   --->   "%add_ln28 = add i8 %i_1, i8 255" [fir128_Q1/fir.cpp:28]   --->   Operation 33 'add' 'add_ln28' <Predicate = (!tmp)> <Delay = 1.91> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 34 [1/1] (1.58ns)   --->   "%store_ln28 = store i8 %add_ln28, i8 %i" [fir128_Q1/fir.cpp:28]   --->   Operation 34 'store' 'store_ln28' <Predicate = (!tmp)> <Delay = 1.58>

State 2 <SV = 1> <Delay = 6.50>
ST_2 : Operation 35 [1/2] (3.25ns)   --->   "%shift_reg_V_load = load i7 %shift_reg_V_addr" [fir128_Q1/fir.cpp:33]   --->   Operation 35 'load' 'shift_reg_V_load' <Predicate = (!tmp & !icmp_ln29)> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 128> <RAM>
ST_2 : Operation 36 [1/1] (0.00ns)   --->   "%shift_reg_V_addr_1 = getelementptr i32 %shift_reg_V, i64 0, i64 %i_cast1" [fir128_Q1/fir.cpp:33]   --->   Operation 36 'getelementptr' 'shift_reg_V_addr_1' <Predicate = (!tmp & !icmp_ln29)> <Delay = 0.00>
ST_2 : Operation 37 [1/1] (3.25ns)   --->   "%store_ln33 = store i32 %shift_reg_V_load, i7 %shift_reg_V_addr_1" [fir128_Q1/fir.cpp:33]   --->   Operation 37 'store' 'store_ln33' <Predicate = (!tmp & !icmp_ln29)> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 128> <RAM>
ST_2 : Operation 38 [1/2] (3.25ns)   --->   "%fir_int_int_c_load = load i7 %fir_int_int_c_addr" [fir128_Q1/fir.cpp:34]   --->   Operation 38 'load' 'fir_int_int_c_load' <Predicate = (!tmp & !icmp_ln29)> <Delay = 3.25> <CoreInst = "ROM">   --->   Core 95 'ROM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 32> <Depth = 128> <ROM>

State 3 <SV = 2> <Delay = 6.91>
ST_3 : Operation 39 [2/2] (6.91ns)   --->   "%mul_ln34 = mul i32 %fir_int_int_c_load, i32 %shift_reg_V_load" [fir128_Q1/fir.cpp:34]   --->   Operation 39 'mul' 'mul_ln34' <Predicate = (!tmp & !icmp_ln29)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 4 <SV = 3> <Delay = 6.91>
ST_4 : Operation 40 [1/2] (6.91ns)   --->   "%mul_ln34 = mul i32 %fir_int_int_c_load, i32 %shift_reg_V_load" [fir128_Q1/fir.cpp:34]   --->   Operation 40 'mul' 'mul_ln34' <Predicate = (!tmp & !icmp_ln29)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 47 [1/1] (0.00ns)   --->   "%acc_load_1 = load i32 %acc"   --->   Operation 47 'load' 'acc_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_4 : Operation 48 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i32P0A, i32 %acc_out, i32 %acc_load_1"   --->   Operation 48 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_4 : Operation 49 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 49 'ret' 'ret_ln0' <Predicate = (tmp)> <Delay = 0.00>

State 5 <SV = 4> <Delay = 5.72>
ST_5 : Operation 41 [1/1] (1.58ns)   --->   "%br_ln0 = br void %for.inc"   --->   Operation 41 'br' 'br_ln0' <Predicate = (!tmp & !icmp_ln29)> <Delay = 1.58>
ST_5 : Operation 42 [1/1] (0.00ns) (grouped into LUT with out node acc_1)   --->   "%mul_pn = phi i32 %mul_read, void %if.then, i32 %mul_ln34, void %if.else" [fir128_Q1/fir.cpp:34]   --->   Operation 42 'phi' 'mul_pn' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 43 [1/1] (0.00ns)   --->   "%acc_load = load i32 %acc" [fir128_Q1/fir.cpp:24]   --->   Operation 43 'load' 'acc_load' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 44 [1/1] (2.55ns) (out node of the LUT)   --->   "%acc_1 = add i32 %mul_pn, i32 %acc_load" [fir128_Q1/fir.cpp:24]   --->   Operation 44 'add' 'acc_1' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 45 [1/1] (1.58ns)   --->   "%store_ln28 = store i32 %acc_1, i32 %acc" [fir128_Q1/fir.cpp:28]   --->   Operation 45 'store' 'store_ln28' <Predicate = true> <Delay = 1.58>
ST_5 : Operation 46 [1/1] (0.00ns)   --->   "%br_ln28 = br void %for.body" [fir128_Q1/fir.cpp:28]   --->   Operation 46 'br' 'br_ln28' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 2.7ns.

 <State 1>: 5.78ns
The critical path consists of the following:
	'alloca' operation ('i') [7]  (0 ns)
	'load' operation ('i') on local variable 'i' [14]  (0 ns)
	'add' operation ('add_ln33', fir128_Q1/fir.cpp:33) [26]  (1.87 ns)
	'getelementptr' operation ('shift_reg_V_addr', fir128_Q1/fir.cpp:33) [28]  (0 ns)
	'load' operation ('shift_reg_V_load', fir128_Q1/fir.cpp:33) on array 'shift_reg_V' [29]  (3.25 ns)
	blocking operation 0.659 ns on control path)

 <State 2>: 6.51ns
The critical path consists of the following:
	'load' operation ('shift_reg_V_load', fir128_Q1/fir.cpp:33) on array 'shift_reg_V' [29]  (3.25 ns)
	'store' operation ('store_ln33', fir128_Q1/fir.cpp:33) of variable 'shift_reg_V_load', fir128_Q1/fir.cpp:33 on array 'shift_reg_V' [31]  (3.25 ns)

 <State 3>: 6.91ns
The critical path consists of the following:
	'mul' operation ('mul_ln34', fir128_Q1/fir.cpp:34) [34]  (6.91 ns)

 <State 4>: 6.91ns
The critical path consists of the following:
	'mul' operation ('mul_ln34', fir128_Q1/fir.cpp:34) [34]  (6.91 ns)

 <State 5>: 5.73ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('mul_pn', fir128_Q1/fir.cpp:34) with incoming values : ('mul_read') ('mul_ln34', fir128_Q1/fir.cpp:34) [40]  (1.59 ns)
	'phi' operation ('mul_pn', fir128_Q1/fir.cpp:34) with incoming values : ('mul_read') ('mul_ln34', fir128_Q1/fir.cpp:34) [40]  (0 ns)
	'add' operation ('acc', fir128_Q1/fir.cpp:24) [42]  (2.55 ns)
	'store' operation ('store_ln28', fir128_Q1/fir.cpp:28) of variable 'acc', fir128_Q1/fir.cpp:24 on local variable 'acc' [45]  (1.59 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
